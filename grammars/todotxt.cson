'name': 'TodoTXT'
'scopeName': 'text.todotxt'
'fileTypes': [
  'todo.txt'
]
'patterns': [
  {
    # Strikethrough
    # Example:
    #
    # ```
    # ~~foo bar foo~~`
    # ```
    'match': '(?<=^|\\s|\\S)~~.+?~~(?=\\s|\\S)'
    'name': 'markup.comment.strike.todotxt'
  }
  {
    # Raw
    # Example:
    #
    # ```
    # `foo bar`
    # ```
    'match': '(?<=^|\\s|\\S)`.+?`(?=\\S|\\s)'
    'name': 'markup.code.raw.todotxt'
  }
  {
    # Emphasis
    # Example:
    #
    # ```
    # _foo bar_
    # ```
    'match': '(?<=^|\\s|\\S)_.+?_(?=\\S|\\s)'
    'name': 'markup.italic.emphasis.todotxt'
  }
  {
    # Strong
    # Example:
    #
    # ```
    # **foo bar**
    # ```
    'match': '(?<=^|\\s|\\S)\\*\\*.+?\\*\\*(?=\\S|\\s)'
    'name': 'markup.bold.strong.emphasis.todotxt'
  }
  {
    # Priority
    # Example:
    #
    # ```
    # A foo bar
    # ```
    'match': '^\\s*?\\([A-Z]\\)'
    'name': 'constant.language.priority.todotxt'
  }
  {
    # Date 1
    # Example:
    #
    # ```
    # t:yyyy-mm-dd
    # ```
    'match': '(?<=\\s|[^0-9]|^)t(:)\\d{4}(-)\\d{2}(-)\\d{2}(?=\\s|[^0-9])'
    'name': 'constant.language.date.todotxt'
    'captures':
      '1': 'name': 'punctuation.separator.colon.key-value.todotxt'
      '2': 'name': 'punctuation.separator.dash.date.todotxt'
      '3': 'name': 'punctuation.separator.dash.date.todotxt'
  }
  {
    # Date 2
    # Example:
    #
    # ```
    # yyyy-mm-dd
    # ```
    'match': '(?<=\\s|[^0-9]|^)\\d{4}(-)\\d{2}(-)\\d{2}(?=\\s|[^0-9])'
    'name': 'constant.language.date.todotxt'
    'captures':
      '1': 'name': 'punctuation.separator.dash.date.todotxt'
      '2': 'name': 'punctuation.separator.dash.date.todotxt'
  }
  {
    # Date time 1
    # Example:
    #
    # ```
    # hh-mm
    # ```
    'match': '(?<=\\s|[^0-9]|^)\\d{2}(-)\\d{2}(?=\\s|[^0-9])'
    'name': 'constant.language.date.todotxt'
    'captures':
      '1': 'name': 'punctuation.separator.dash.date.todotxt'
  }
  {
    # Date time period
    # Example:
    #
    # ```
    # hh-mm-hh-mm
    # ```
    'match': '(?<=\\s|[^0-9]|^)\\d{2}(-)\\d{2}(-)\\d{2}(-)\\d{2}(?=\\s|[^0-9])'
    'name': 'constant.language.date.todotxt'
    'captures':
      '1': 'name': 'punctuation.separator.dash.date.todotxt'
      '2': 'name': 'punctuation.separator.dash.date.todotxt'
      '3': 'name': 'punctuation.separator.dash.date.todotxt'
  }
  {
    # Due to date
    # Example:
    #
    # ```
    # due:yyyy-mm-dd
    # ```
    'match': '(?<=\\s|[^0-9]|^)due(:)\\d{4}(-)\\d{2}(-)\\d{2}(?=\\s|[^0-9])'
    'name': 'constant.language.due.todotxt'
    'captures':
      '1': 'name': 'punctuation.separator.colon.key-value.todotxt'
      '2': 'name': 'punctuation.separator.dash.date.todotxt'
      '3': 'name': 'punctuation.separator.dash.date.todotxt'
  }
  {
    # Extension
    # Excluding intersection with 'http(s)' prefix detecting
    # Example:
    #
    # ```
    # bar goo-bar:foo-bar
    # ```
    'match': '(?<!http:\\/\\/)(?<=[^-a-zA-Zа-яА-Я0-9ії]|^)[-a-zA-Zа-яА-Я0-9ії]+?(:)[-a-zA-Zа-яА-Я0-9ії]+?(?=[^-a-zA-Zа-яА-Я0-9ії])'
    'name': 'constant.language.extension.function.todotxt'
    'captures':
      '1': 'name': 'punctuation.separator.colon.key-value.todotxt'
  }
  {
    # Extension with quotes
    # Example:
    #
    # ```
    # bar 'goo bar':'foo bar'
    # ```
    'match': '(?<=^|[^-a-zA-Zа-яА-Я0-9ії])[-a-zA-Zа-яА-Я0-9ії]+?(:)\'.+?\'(?=\\S|\\s)'
    'name': 'constant.language.extension.function.todotxt'
    'captures':
      '1': 'name': 'punctuation.separator.colon.key-value.todotxt'
  }
  {
    # Context
    # Example:
    #
    # ```
    # foo bar @goo
    # bar @foo-boo
    # ```
    'match': '(?<=[^-a-zA-Zа-яА-Я0-9ії]|^)(@)[-a-zA-Zа-яА-Я0-9ії]+?(?=[^-a-zA-Zа-яА-Я0-9ії])'
    'name': 'entity.name.tag.context.keyword.todotxt'
    'captures':
      '1': 'name': 'punctuation.definition.variable.todotxt'
  }
  {
    # Context with quotes
    # Example:
    #
    # ```
    # bar @'foo bar'
    # ```
    'match': '(?<=^|\\s|\\S)(@)\'.+?\'(?=\\S|\\s)'
    'name': 'entity.name.tag.context.keyword.todotxt'
    'captures':
      '1': 'name': 'punctuation.definition.variable.todotxt'
  }
  {
    # Project
    # Example:
    #
    # ```
    # foo bar +goo
    # bar +foo-boo
    # ```
    'match': '(?<=[^-a-zA-Zа-яА-Я0-9ії]|^)(\\+)[-a-zA-Zа-яА-Я0-9ії]+?(?=[^-a-zA-Zа-яА-Я0-9ії])'
    'name': 'entity.name.tag.project.variable.todotxt'
    'captures':
      '1': 'name': 'punctuation.definition.variable.todotxt'
  }
  {
    # Project with quotes
    # Example:
    #
    # ```
    # bar +'foo bar'
    # ```
    'match': '(?<=^|\\s|\\S)\\+\'.+?\'(?=\\S|\\s)'
    'name': 'entity.name.tag.project.variable.todotxt'
  }
  {
    # Allow Cyrillic letter 'x'
    # Example:
    #
    # ```
    # x foo bar
    # ```
    'match': '^\\s*(x|х)\\s.*$'
    'name': 'comment.line.todotxt'
  }
  {
    # Failed
    # Failed, canceled or just ended task state by '-' instead of 'x'
    # Example:
    #
    # ```
    # - foo bar
    # ```
    'match': '^\\s*?-\\s.*$'
    'name': 'markup.comment.strike.todotxt'
  }
  {
    # Comments
    # Example:
    #
    # ```
    # # foo bar
    # bar bar  # goo
    # ```
    'match': '(#).*$'
    'name': 'comment.line.number-sign.todotxt'
    'captures':
      '1': 'name': 'punctuation.definition.comment.todotxt'
  }
]
